scriptencoding utf-8
"
" Plugin settings
"
" ddc
" <Tab> selects the next candidate
inoremap <expr> <Tab> pumvisible() ? "\<C-N>" : <SID>MapComplete()
" <Esc> cancels the completion
inoremap <expr> <Esc> pumvisible() ? "\<C-E>" : "\<Esc>"
" <CR>  inserts the current candidate
inoremap <expr> <CR>  pumvisible() ? "\<C-Y>" : "\<CR>"

call ddc#custom#patch_global('ui', 'none')

call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'maxItems': 10,
    \   'minAutoCompleteLength': 3,
    \   'minManualCompleteLength': 2,
    \   'keywordPattern': '\k+',
    \   'matchers': ['matcher_head'],
    \   'sorters': ['sorter_rank'],
    \   'converters': ['converter_remove_overlap', 'converter_truncate_abbr'],
    \ },
\})

" Local to the cursor: around
" Local to the file: necosyntax, ctags / necovim, dictionary, vim
" Local to the buffers: buffer
" Local to the project: file, lsp
call ddc#custom#patch_global('sources', [
    \ 'lsp', 'buffer', 'ctags', 'necosyntax', 'around', 'dictionary', 'file'
\])

call ddc#custom#patch_global('sourceOptions', {
    \ 'around': {
    \   'mark': '[around]',
    \   'maxItems': 6,
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'necosyntax': {
    \   'mark': '[syntax]',
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'ctags': {
    \   'mark': '[ctags]',
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_fuzzy'],
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'dictionary': {
    \   'mark': '[spell]',
    \   'maxItems': 8,
    \   'keywordPattern': '\S+',
    \   'isVolatile': v:true,
    \   'enabledIf': '!empty(&spell)',
    \ },
\})

call ddc#custom#patch_global('sourceParams', {
    \ 'dictionary': {
    \   'paths': [
    \       expand('~/.vim/spell/en.words'),
    \       expand('~/.vim/spell/ru.words'),
    \   ],
    \   'firstCaseInsensitive': v:true,
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'buffer': {
    \   'mark': '[buffer]',
    \   'maxItems': 6,
    \ },
\})
call ddc#custom#patch_global('sourceParams', {
    \ 'buffer': {
    \   'bufNameStyle': 'basename',
    \   'requireSameFiletype': v:false,
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'file': {
    \   'mark': '[file]',
    \   'maxItems': 32,
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S+\/\S*',
    \ },
\})
call ddc#custom#patch_global('sourceParams', {
    \ 'file': {
    \   'mode': 'os',
    \   'trailingSlash': v:true,
    \   'followSymlinks': v:true,
    \   'disableMenu': v:true,
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'lsp': {
    \   'mark': '[lsp]',
    \   'isVolatile': v:true,
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_fuzzy'],
    \ },
\})

call ddc#custom#patch_global('sourceParams', {
    \ 'lsp': {
    \   'lspEngine': 'vim-lsp',
    \   'confirmBehavior': 'replace',
    \   'enableAdditionalTextEdit': v:true,
    \   'enableResolveItem': v:true,
    \ },
\})

call ddc#custom#patch_filetype('vim', {
    \ 'sources': ['vim', 'buffer', 'necovim', 'around', 'dictionary', 'file'],
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'necovim': {
    \   'mark': '[viml]',
    \ },
\})

call ddc#custom#patch_global('sourceOptions', {
    \ 'vim': {
    \   'mark': '[vim]',
    \   'isVolatile': v:true,
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_fuzzy'],
    \ },
\})

call ddc#enable()

" fzf.vim
augroup fzf_vim
autocmd!
autocmd VimEnter * command! -bang -nargs=* GR
    \ call fzf#vim#grep2('rg --pretty --no-heading --smart-case '.<q-args>.' -- ', '', fzf#vim#with_preview(), <bang>0)
augroup END

" SpellCheck
augroup spellcheck
autocmd!
autocmd VimEnter * delcommand SpellCheck
autocmd VimEnter * delcommand SpellLCheck
autocmd VimEnter * command! -bar -bang -range=% -nargs=*
    \ -complete=customlist,SpellCheckCompleteFunc Spell
    \ call SpellCheck#quickfix#List(<line1>, <line2>, <bang>1, 1, <q-args>)
augroup END


" Helper functions {{{
function! s:MapComplete()
    let l:col = col('.') - 1
    if (l:col <= 0) || (getline('.')[l:col - 1] =~# '\s')
        " If the cursor is at the beginning of a line or after a space,
        " then insert <Tab>.
        return "\<Tab>"
    endif

    " Otherwise begin the completion process.
    return ddc#map#manual_complete({'ui': 'native'})
endfunction
" }}}
" vim:set foldenable foldmethod=marker:
